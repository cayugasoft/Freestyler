// This is code generated by style_generator.rb script. Do not modify this file directly since every changes will be overwritten by script.
// Date: 2016-09-22 16:08:53 +0300
import UIKit
import FreestylerCore



public extension UITextField {
    /** Updates `placeholder` property of `UITextField` instance. */
    public static func placeholder(placeholder: String?) -> Style {
        return Style("Placeholder \(placeholder)") {
            (textField: UITextField) in
            textField.placeholder = placeholder
        }
    }

    /** Updates `attributedPlaceholder` property of `UITextField` instance. */
    public static func attributedPlaceholder(attributedPlaceholder: NSAttributedString) -> Style {
        return Style("Attributed Placeholder \(attributedPlaceholder)") {
            (textField: UITextField) in
            textField.attributedPlaceholder = attributedPlaceholder
        }
    }

    /** Updates `defaultTextAttributes` property of `UITextField` instance. */
    public static func defaultTextAttributes(defaultTextAttributes: [String : AnyObject]) -> Style {
        return Style("Default Text Attributes \(defaultTextAttributes)") {
            (textField: UITextField) in
            textField.defaultTextAttributes = defaultTextAttributes
        }
    }

    /** Updates `font` property of `UITextField` instance. */
    public static func font(font: FontType?) -> Style {
        return Style("Font \(font)") {
            (textField: UITextField) in
            textField.font = font?.font
        }
    }

    /** Updates `textColor` property of `UITextField` instance. */
    public static func textColor(textColor: ColorType?) -> Style {
        return Style("Text Color \(textColor)") {
            (textField: UITextField) in
            textField.textColor = textColor?.color
        }
    }

    /** Updates `textAlignment` property of `UITextField` instance. */
    public static func textAlignment(textAlignment: NSTextAlignment) -> Style {
        return Style("Text Alignment \(textAlignment)") {
            (textField: UITextField) in
            textField.textAlignment = textAlignment
        }
    }

    /** Updates `typingAttributes` property of `UITextField` instance. */
    public static func typingAttributes(typingAttributes: [String : AnyObject]?) -> Style {
        return Style("Typing Attributes \(typingAttributes)") {
            (textField: UITextField) in
            textField.typingAttributes = typingAttributes
        }
    }

    /** Updates `adjustsFontSizeToFitWidth` property of `UITextField` instance. */
    public static func adjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Bool) -> Style {
        return Style("Adjusts Font Size To Fit Width \(adjustsFontSizeToFitWidth)") {
            (textField: UITextField) in
            textField.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth
        }
    }

    /** Updates `minimumFontSize` property of `UITextField` instance. */
    public static func minimumFontSize(minimumFontSize: CGFloat) -> Style {
        return Style("Minimum Font Size \(minimumFontSize)") {
            (textField: UITextField) in
            textField.minimumFontSize = minimumFontSize
        }
    }

    /** Updates `borderStyle` property of `UITextField` instance. */
    public static func borderStyle(borderStyle: UITextBorderStyle) -> Style {
        return Style("Border Style \(borderStyle)") {
            (textField: UITextField) in
            textField.borderStyle = borderStyle
        }
    }

    /** Updates `background` property of `UITextField` instance. */
    public static func background(background: UIImage?) -> Style {
        return Style("Background \(background)") {
            (textField: UITextField) in
            textField.background = background
        }
    }

    /** Updates `disabledBackground` property of `UITextField` instance. */
    public static func disabledBackground(disabledBackground: UIImage?) -> Style {
        return Style("Disabled Background \(disabledBackground)") {
            (textField: UITextField) in
            textField.disabledBackground = disabledBackground
        }
    }

    /** Updates `clearButtonMode` property of `UITextField` instance. */
    public static func clearButtonMode(clearButtonMode: UITextFieldViewMode) -> Style {
        return Style("Clear Button Mode \(clearButtonMode)") {
            (textField: UITextField) in
            textField.clearButtonMode = clearButtonMode
        }
    }

    /** Updates `leftView` property of `UITextField` instance. */
    public static func leftView(leftView: UIView?) -> Style {
        return Style("Left View \(leftView)") {
            (textField: UITextField) in
            textField.leftView = leftView
        }
    }

    /** Updates `leftViewMode` property of `UITextField` instance. */
    public static func leftViewMode(leftViewMode: UITextFieldViewMode) -> Style {
        return Style("Left View Mode \(leftViewMode)") {
            (textField: UITextField) in
            textField.leftViewMode = leftViewMode
        }
    }

    /** Updates `rightView` property of `UITextField` instance. */
    public static func rightView(rightView: UIView?) -> Style {
        return Style("Right View \(rightView)") {
            (textField: UITextField) in
            textField.rightView = rightView
        }
    }

    /** Updates `rightViewMode` property of `UITextField` instance. */
    public static func rightViewMode(rightViewMode: UITextFieldViewMode) -> Style {
        return Style("Right View Mode \(rightViewMode)") {
            (textField: UITextField) in
            textField.rightViewMode = rightViewMode
        }
    }
}
