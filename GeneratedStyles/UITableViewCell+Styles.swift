// This is code generated by style_generator.rb script. Do not modify this file directly since every changes will be overwritten by script.
// Date: 2016-09-24 00:35:39 +0300
import UIKit
import FreestylerCore



public extension UITableViewCell {
    /** Updates `backgroundView` property of `UITableViewCell` instance. */
    public static func backgroundView(backgroundView: UIView?) -> Style {
        return Style("Background View \(backgroundView)") {
            (styleable: UITableViewCell) in
            styleable.backgroundView = backgroundView
        }
    }

    /** Updates `selectedBackgroundView` property of `UITableViewCell` instance. */
    public static func selectedBackgroundView(selectedBackgroundView: UIView?) -> Style {
        return Style("Selected Background View \(selectedBackgroundView)") {
            (styleable: UITableViewCell) in
            styleable.selectedBackgroundView = selectedBackgroundView
        }
    }

    /** Updates `multipleSelectionBackgroundView` property of `UITableViewCell` instance. */
    public static func multipleSelectionBackgroundView(multipleSelectionBackgroundView: UIView?) -> Style {
        return Style("Multiple Selection Background View \(multipleSelectionBackgroundView)") {
            (styleable: UITableViewCell) in
            styleable.multipleSelectionBackgroundView = multipleSelectionBackgroundView
        }
    }

    /** Updates `accessoryType` property of `UITableViewCell` instance. */
    public static func accessoryType(accessoryType: UITableViewCellAccessoryType) -> Style {
        return Style("Accessory Type \(accessoryType)") {
            (styleable: UITableViewCell) in
            styleable.accessoryType = accessoryType
        }
    }

    /** Updates `accessoryView` property of `UITableViewCell` instance. */
    public static func accessoryView(accessoryView: UIView?) -> Style {
        return Style("Accessory View \(accessoryView)") {
            (styleable: UITableViewCell) in
            styleable.accessoryView = accessoryView
        }
    }

    /** Updates `editingAccessoryType` property of `UITableViewCell` instance. */
    public static func editingAccessoryType(editingAccessoryType: UITableViewCellAccessoryType) -> Style {
        return Style("Editing Accessory Type \(editingAccessoryType)") {
            (styleable: UITableViewCell) in
            styleable.editingAccessoryType = editingAccessoryType
        }
    }

    /** Updates `editingAccessoryView` property of `UITableViewCell` instance. */
    public static func editingAccessoryView(editingAccessoryView: UIView?) -> Style {
        return Style("Editing Accessory View \(editingAccessoryView)") {
            (styleable: UITableViewCell) in
            styleable.editingAccessoryView = editingAccessoryView
        }
    }

    /** Updates `showsReorderControl` property of `UITableViewCell` instance. */
    public static func showsReorderControl(showsReorderControl: Bool) -> Style {
        return Style("Shows Reorder Control \(showsReorderControl)") {
            (styleable: UITableViewCell) in
            styleable.showsReorderControl = showsReorderControl
        }
    }

    /** Updates `indentationLevel` property of `UITableViewCell` instance. */
    public static func indentationLevel(indentationLevel: Int) -> Style {
        return Style("Indentation Level \(indentationLevel)") {
            (styleable: UITableViewCell) in
            styleable.indentationLevel = indentationLevel
        }
    }

    /** Updates `indentationWidth` property of `UITableViewCell` instance. */
    public static func indentationWidth(indentationWidth: CGFloat) -> Style {
        return Style("Indentation Width \(indentationWidth)") {
            (styleable: UITableViewCell) in
            styleable.indentationWidth = indentationWidth
        }
    }

    /** Updates `shouldIndentWhileEditing` property of `UITableViewCell` instance. */
    public static func shouldIndentWhileEditing(shouldIndentWhileEditing: Bool) -> Style {
        return Style("Should Indent While Editing \(shouldIndentWhileEditing)") {
            (styleable: UITableViewCell) in
            styleable.shouldIndentWhileEditing = shouldIndentWhileEditing
        }
    }

    /** Updates `separatorInset` property of `UITableViewCell` instance. */
    public static func separatorInset(separatorInset: UIEdgeInsets) -> Style {
        return Style("Separator Inset \(separatorInset)") {
            (styleable: UITableViewCell) in
            styleable.separatorInset = separatorInset
        }
    }
}
