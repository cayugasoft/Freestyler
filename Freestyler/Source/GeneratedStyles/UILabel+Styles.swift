// This is code generated by style_generator.rb script. Do not modify this file directly since every changes will be overwritten by script.
// Date: 2016-09-29 00:13:37 +0300
import UIKit
import FreestylerCore



public extension UILabel {
    /** Updates `textColor` property of `UILabel` instance. */
    public static func styleTextColor(textColor: ColorType?) -> Style {
        return Style("Text Color \(textColor)") {
            (styleable: UILabel) in
            styleable.textColor = textColor?.color
        }
    }

    /** Updates `font` property of `UILabel` instance. */
    public static func styleFont(font: FontType?) -> Style {
        return Style("Font \(font)") {
            (styleable: UILabel) in
            styleable.font = font?.font
        }
    }

    /** Updates `textAlignment` property of `UILabel` instance. */
    public static func styleTextAlignment(textAlignment: NSTextAlignment) -> Style {
        return Style("Text Alignment \(textAlignment)") {
            (styleable: UILabel) in
            styleable.textAlignment = textAlignment
        }
    }

    /** Updates `lineBreakMode` property of `UILabel` instance. */
    public static func styleLineBreakMode(lineBreakMode: NSLineBreakMode) -> Style {
        return Style("Line Break Mode \(lineBreakMode)") {
            (styleable: UILabel) in
            styleable.lineBreakMode = lineBreakMode
        }
    }

    /** Updates `adjustsFontSizeToFitWidth` property of `UILabel` instance. */
    public static func styleAdjustsFontSizeToFitWidth(adjustsFontSizeToFitWidth: Bool) -> Style {
        return Style("Adjusts Font Size To Fit Width \(adjustsFontSizeToFitWidth)") {
            (styleable: UILabel) in
            styleable.adjustsFontSizeToFitWidth = adjustsFontSizeToFitWidth
        }
    }

    /** Updates `allowsDefaultTighteningForTruncation` property of `UILabel` instance. */
    public static func styleAllowsDefaultTighteningForTruncation(allowsDefaultTighteningForTruncation: Bool) -> Style {
        return Style("Allows Default Tightening For Truncation \(allowsDefaultTighteningForTruncation)") {
            (styleable: UILabel) in
            styleable.allowsDefaultTighteningForTruncation = allowsDefaultTighteningForTruncation
        }
    }

    /** Updates `baselineAdjustment` property of `UILabel` instance. */
    public static func styleBaselineAdjustment(baselineAdjustment: UIBaselineAdjustment) -> Style {
        return Style("Baseline Adjustment \(baselineAdjustment)") {
            (styleable: UILabel) in
            styleable.baselineAdjustment = baselineAdjustment
        }
    }

    /** Updates `minimumScaleFactor` property of `UILabel` instance. */
    public static func styleMinimumScaleFactor(minimumScaleFactor: CGFloat) -> Style {
        return Style("Minimum Scale Factor \(minimumScaleFactor)") {
            (styleable: UILabel) in
            styleable.minimumScaleFactor = minimumScaleFactor
        }
    }

    /** Updates `numberOfLines` property of `UILabel` instance. */
    public static func styleNumberOfLines(numberOfLines: Int) -> Style {
        return Style("Number Of Lines \(numberOfLines)") {
            (styleable: UILabel) in
            styleable.numberOfLines = numberOfLines
        }
    }

    /** Updates `highlightedTextColor` property of `UILabel` instance. */
    public static func styleHighlightedTextColor(highlightedTextColor: ColorType?) -> Style {
        return Style("Highlighted Text Color \(highlightedTextColor)") {
            (styleable: UILabel) in
            styleable.highlightedTextColor = highlightedTextColor?.color
        }
    }

    /** Updates `shadowColor` property of `UILabel` instance. */
    public static func styleShadowColor(shadowColor: ColorType) -> Style {
        return Style("Shadow Color \(shadowColor)") {
            (styleable: UILabel) in
            styleable.shadowColor = shadowColor.color
        }
    }

    /** Updates `shadowOffset` property of `UILabel` instance. */
    public static func styleShadowOffset(shadowOffset: CGSize) -> Style {
        return Style("Shadow Offset \(shadowOffset)") {
            (styleable: UILabel) in
            styleable.shadowOffset = shadowOffset
        }
    }

    /** Updates `preferredMaxLayoutWidth` property of `UILabel` instance. */
    public static func stylePreferredMaxLayoutWidth(preferredMaxLayoutWidth: CGFloat) -> Style {
        return Style("Preferred Max Layout Width \(preferredMaxLayoutWidth)") {
            (styleable: UILabel) in
            styleable.preferredMaxLayoutWidth = preferredMaxLayoutWidth
        }
    }
}
