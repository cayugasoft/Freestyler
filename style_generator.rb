require "xcodeproj"
require "json"
require "facets"


def instance_name_from_class(class_name)
	unprefixed = class_name[2..-1]
	return unprefixed[0].downcase + unprefixed[1..-1]
end

def property_assignment(custom_body, instance, keypath, property, property_type) 
	if custom_body != "" 
		return custom_body
	end
	left_side = ""
	right_side = ""
	if keypath.empty?
		left_side = "#{instance}.#{property}"
	else 
		left_side = "#{instance}.#{keypath}.#{property}"
	end
	if property_type == "ColorType" 
		right_side = "#{property}.color"
	elsif property_type == "FontType"
		right_side = "#{property}.font"
    elsif property_type == "ColorType?"
        right_side = "#{property}?.color"
    elsif property_type == "FontType?"
        right_side = "#{property}?.font"
	else
		right_side = "#{property}"
	end
	return left_side + " = " + right_side
end

def generate_swift_style(class_name, keypath, property, property_type, custom_body, style_name, comment)
	instance = "#{instance_name_from_class(class_name)}"

	code = <<-STYLE
/** #{comment} */
public static func #{property}(#{property}: #{property_type}) -> Style {
    return Style(\"#{style_name}\") {
        (#{instance}: #{class_name}) in
        #{property_assignment(custom_body, instance, keypath, property, property_type)}
    }
}
STYLE
end

def default_style_name(property)
    style_name = property.split(/(?=[A-Z])/).map { |s| s.capitalize }.join(" ")
    style_name += " \\(#{property})"
    style_name
end

def default_comment(property, class_name)
    "Updates `#{property}` property of `#{class_name}` instance."
end

def fill_defaults!(styles)
    styles.each do |class_name, class_styles|
        class_styles.each do |style|
            if style["keypath"].nil? 
                style["keypath"] = ""
            end
            if style["custom_body"].nil?
            	style["custom_body"] = ""
            end
            if style["style_name"].nil?
                style["style_name"] = default_style_name(style["property"])
            end
            if style["comment"].nil?
                style["comment"] = default_comment(style["property"], class_name)
            end
        end
    end
end

def generate_extension(class_name, styles)
    extension = <<-EXTENSION
public extension #{class_name} {
#{styles.map { |s| generate_swift_style(class_name, s["keypath"], s["property"], s["type"], s["custom_body"], s["style_name"], s["comment"]).margin(4) }.join("\n")}}
EXTENSION
    extension
end 


#--------------------------------
#--------- MAIN -----------------

path_to_styles = ARGV[0]
if path_to_styles.nil? 
    puts "Must provide path to styles (json file) as 1st argument"
    exit 1
end

path_to_output = ARGV[1]
if path_to_styles.nil? 
    puts "Must provide path to directory where generated files will be placed as 2nd argument"
    exit 2
end

styles_json = File.read(path_to_styles)
styles = JSON.parse(styles_json)
fill_defaults!(styles)

styles.each do |class_name, class_styles|
    puts "Generating styles for #{class_name}..."
    extension = generate_extension(class_name, class_styles)
    file_name = "#{class_name}+Styles.swift"
    generated_file_path = File.join(path_to_output, file_name)
    File.open(generated_file_path, 'w') { |f|
        f.puts("// This is code generated by style_generator.rb script. Do not modify this file directly since every changes will be overwritten by script.")
        f.puts("// Date: #{Time.now}")
		f.puts("import UIKit")
        f.puts("import FreestylerCore")
        f.puts("\n\n\n")
        f.puts(extension)
    }
    puts "  Saved #{class_styles.count} styles to #{file_name}."
end